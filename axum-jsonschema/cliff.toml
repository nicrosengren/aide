# configuration file for git-cliff (0.1.0)

[changelog]
header = """
# Changelog\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="release-axum-jsonschema-") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## unreleased
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        [{{ previous.commit_id | truncate(length=7, end="") }}]({{ previous.commit_id }})...\
            [{{ commit_id | truncate(length=7, end="") }}]({{ commit_id }})
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/tamasfe/aide/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = '^feat\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Features" },
    { message = '^fix\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Bug Fixes" },
    { message = '^doc\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Documentation" },
    { message = '^perf\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Performance" },
    { message = '^refactor\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Refactor" },
    { message = '^style\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Styling" },
    { message = '^test\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Testing" },
    { message = '^chore.*version\s*bump.*', skip = true },
    { message = '^chore.*changelog.*', skip = true },
    { message = '^chore\([^)]*(axum-jsonschema|\*)[^)]*\)', group = "Miscellaneous Tasks" },
    { body = '.*security', group = "Security" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "release-axum-jsonschema-[0-9]*"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
